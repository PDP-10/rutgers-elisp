
(NILL "this is not a source file.
do not make corrections here or they will be lost.
the source for this file is elap.lsp, and it is
generated by doing a dskin of uplap.lsp.") 
NIL
(DF ELAP (CODDLE) (ELAP1 CODDLE) NIL)
(DE ELAP1 (CODELIST)
    ((LAMBDA (CODEWORDS CONSTANTS ELAPASS X Y Z FNCLIS STKOFFSET
			CONSTLIST JCONSTLIST VCONSTLIST LABELIST LCLFNS)
      (SETQ ELAPASS 0)
      (MAPC 'EVAL CODELIST)
      (SETQ X (%ALLOCATE-BPS CONSTANTS CODEWORDS))
      (SETQ CODEWORDS (+I (*PLUS CONSTANTS X)))
      (SETQ CONSTANTS X)
      (CODEREL CODEWORDS)
      (CONDEP)
      (SETQ ELAPASS 1)
      (MAPC 'EVAL CODELIST)
      (APPLY# 'REMOB LABELIST)
      (MAPC (FUNCTION (LAMBDA (X) (REMPROP X 'RELAD))) LCLFNS)
      (MAPC (FUNCTION (LAMBDA (X) (APPLY '%SET-FUNCTION-ENTRY X)))
	    FNCLIS)
      FNCLIS)
     0 
     0 
     NIL 
     NIL 
     NIL 
     NIL 
     NIL 
     0 
     NIL 
     NIL 
     NIL 
     NIL 
     NIL))
NIL
(DE %RH (N) (*BOOLE 1 N 262143))
(SETQ %REG-P (GET 'P 'SYM))
(SETQ %REG-O1 (GET 'O1 'SYM))
(SETQ %REG-O0 (-I (GET 'O1 'SYM)))
(SETQ %REG-Q (GET 'Q 'SYM))
(SETQ %PAST-REG-Q (LSH (GET 'Q 'SYM) 18))
(SETQ %REG-N (GET 'N 'SYM))
(SETQ %REG-W2 (GET 'W2 'SYM))
(SETQ %LARG (*PLUS (LSH (*PLUS 16 %REG-P) 18) (%RH -1)))
NIL
(MAPC 'SET
      '(%JSP %ADJSP %PUSHJ %POPJ %MOVEI %MOVE %MOVEM %JRST %CAMN %CAME
	     %JUMPE %JUMPN %SETAM %PUSH)
      '(181 69 176 179 129 128 130 172 206 202 210 214 278 177))
(DM DLM (FORM)
    (LIST 'DF
	  (CADR FORM)
	  (LIST 'U)
	  (CONS 'SELECTQ
		(CONS 'ELAPASS (*APPEND (CDDR FORM) (LIST 'NIL))))))
(DF *ALLOCATE (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (COND [(=0 (CAR U)) NIL] [T (CINST 1)])]
	    [(EQ %SELECTQ '1)
	     (COND [(=0 (CAR U)) NIL] [T (DINST %ADJSP %REG-Q (CAR U))])
	     ]
	    [T NIL]))
     ELAPASS))
(DF *ABSCOND (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0)
	     (COND [(=0 (CAR U)) (CINST 1)] [T (CINST 2)])]
	    [(EQ %SELECTQ '1)
	     (COND [(=0 (CAR U)) NIL]
		   [T (DINST %ADJSP %REG-Q (%RH (MINUS (CAR U))))])
	     (DINST %POPJ %REG-P 0)]
	    [T NIL]))
     ELAPASS))
(DF *RELEASE (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (COND [(=0 (CAR U)) NIL] [T (CINST 1)])]
	    [(EQ %SELECTQ '1)
	     (COND [(=0 (CAR U)) NIL]
		   [T (DINST %ADJSP %REG-Q (%RH (MINUS (CAR U))))])
	     (COND [(MINUSP (SETQ STKOFFSET (*DIF STKOFFSET (CAR U))))
		    (ERROR "stack offset mismatch")]
		   [T NIL])]
	    [T NIL]))
     ELAPASS))
(DF *ENTRY (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0)
	     (PUT (CAR U) CODEWORDS 'RELAD)
	     (SETQ LCLFNS (CONS (CAR U) LCLFNS))
	     (COND [(EQ 'LSUBR (CADR U)) (CINST 1)]
		   [(AND [EQ 'FSUBR (CADR U)] [EQ 2 (CADDR U)])
		    (CINST 1)])]
	    [(EQ %SELECTQ '1)
	     (SETQ FNCLIS
		   (CONS (LIST (CAR U) CODEWORDS (CADR U) (CADDR U))
			 FNCLIS))
	     (COND [(EQ 'LSUBR (CADR U))
		    (DINST %JSP %REG-W2 (INTENTRY '%LEXPR-ENTRY))]
		   [(AND [EQ 'FSUBR (CADR U)] [EQ 2 (CADDR U)])
		    (DINST %PUSHJ %REG-P (INTENTRY '%SET-BCP))])]
	    [T NIL]))
     ELAPASS))
(DF *STORE (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1) (CWHAT (CADR U))]
	    [(EQ %SELECTQ '1)
	     (DINST %MOVEM (REG (CAR U)) (DWHAT (CADR U)))]
	    [T NIL]))
     ELAPASS))
(DF *JUMP (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1)]
	    [(EQ %SELECTQ '1) (DINST %JRST 0 (DLABEL (CAR U)))]
	    [T NIL]))
     ELAPASS))
(DF *JUMPC (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1)]
	    [(EQ %SELECTQ '1) (DINST %JRST 0 (DLABEL (CAR U)))]
	    [T NIL]))
     ELAPASS))
(DF *JUMPNC (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1)]
	    [(EQ %SELECTQ '1) (DINST %JRST 0 (DLABEL (CAR U)))]
	    [T NIL]))
     ELAPASS))
(DF *JUMPNIL (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1)]
	    [(EQ %SELECTQ '1)
	     (DINST %JUMPE (REG (OR [CADR U] 1)) (DLABEL (CAR U)))]
	    [T NIL]))
     ELAPASS))
(DF *JUMPT (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1)]
	    [(EQ %SELECTQ '1)
	     (DINST %JUMPN (REG (OR [CADR U] 1)) (DLABEL (CAR U)))]
	    [T NIL]))
     ELAPASS))
(DF *JUMPE (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 2) (CWHAT (CADR U))]
	    [(EQ %SELECTQ '1)
	     (DINST %CAMN %REG-O1 (DWHAT (CADR U)))
	     (DINST %JRST 0 (DLABEL (CAR U)))]
	    [T NIL]))
     ELAPASS))
(DF *JUMPN (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 2) (CWHAT (CADR U))]
	    [(EQ %SELECTQ '1)
	     (DINST %CAME %REG-O1 (DWHAT (CADR U)))
	     (DINST %JRST 0 (DLABEL (CAR U)))]
	    [T NIL]))
     ELAPASS))
(DF *PUSH (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1) (CWHAT (CADR U))]
	    [(EQ %SELECTQ '1)
	     (DINST %PUSH (REG (CAR U)) (DWHAT (CADR U)))
	     (SETQ STKOFFSET (ADD1 STKOFFSET))]
	    [T NIL]))
     ELAPASS))
(DF *LBL (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0)
	     (SET (CAR U) CODEWORDS)
	     (COND [(MEMQ (CAR U) LABELIST)
		    (ERROR "multiply defined label")]
		   [T (SETQ LABELIST (CONS (CAR U) LABELIST))])]
	    [(EQ %SELECTQ '1)
	     (OR [EQ (EVAL (CAR U)) (%RH CODEWORDS)]
		 [ERROR (*CONCAT "Label mismatch at " (CAR U))])]
	    [T NIL]))
     ELAPASS))
(DF *LAMBIND (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0)
	     (CINST (+I (LENGTH (CAR U))))
	     (MAPC (FUNCTION (LAMBDA (X) (CVCONST (CAR X)))) (CADR U))]
	    [(EQ %SELECTQ '1)
	     (DINST %JSP 
		    %REG-W2 
		    (INTENTRY '%LAMBDABIND (LENGTH (CAR U))))
	     (MAPC (FUNCTION
		    (LAMBDA (X Y)
		     (DINST %SETAM (REG X) (DVCONST (CAR Y)))))
		   (CAR U)
		   (CADR U))]
	    [T NIL]))
     ELAPASS))
(DF *PROGBIND (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0)
	     (CINST (+I (LENGTH (CAR U))))
	     (MAPC (FUNCTION (LAMBDA (X) (CVCONST (CAR X)))) (CAR U))]
	    [(EQ %SELECTQ '1)
	     (DINST %JSP 
		    %REG-W2 
		    (INTENTRY '%LAMBDABIND (LENGTH (CAR U))))
	     (MAPC (FUNCTION
		    (LAMBDA (X) (DINST %SETAM 0 (DVCONST (CAR X)))))
		   (CAR U))]
	    [T NIL]))
     ELAPASS))
(DF *FREERSTR (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (COND [(CAR U) (CINST 1)] [T NIL])]
	    [(EQ %SELECTQ '1)
	     (COND [(CAR U)
		    (DINST %PUSHJ 
			   %REG-P 
			   (INTENTRY '%UNBIND (LENGTH (CAR U))))]
		   [T NIL])]
	    [T NIL]))
     ELAPASS))
(DF *FREERSTRE (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (COND [(CAR U) (CINST 1)] [T NIL])]
	    [(EQ %SELECTQ '1)
	     (COND [(CAR U)
		    (DINST %JRST 0 (INTENTRY '%UNBIND (LENGTH (CAR U))))
		    ]
		   [T NIL])]
	    [T NIL]))
     ELAPASS))
(DF *LOAD (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1) (CWHAT (CADR U))]
	    [(EQ %SELECTQ '1)
	     (DINST %MOVE (REG (CAR U)) (DWHAT (CADR U)))]
	    [T NIL]))
     ELAPASS))
(DF *LINK (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0) (CINST 1) (CJCONST U)]
	    [(EQ %SELECTQ '1) (DINST %PUSHJ %REG-P (DJCONST U))]
	    [T NIL]))
     ELAPASS))
(DF *LINKE (U)
    ((LAMBDA (%SELECTQ)
      (COND [(EQ %SELECTQ '0)
	     (CINST (COND [(=0 (CADDDR U)) 1] [T 2]))
	     (CJCONST U)]
	    [(EQ %SELECTQ '1)
	     (COND [(NEQ 0 (CADDDR U))
		    (DINST %ADJSP %REG-Q (%RH (MINUS (CADDDR U))))]
		   [T NIL])
	     (DINST %JRST 0 (DJCONST U))]
	    [T NIL]))
     ELAPASS))
(DE CINST (N) (SETQ CODEWORDS (*PLUS N CODEWORDS)))
(DE DINST (INST REG EFAD)
    (%DEPOSIT-INSTRUCTION CODEWORDS INST REG EFAD)
    (SETQ CODEWORDS (ADD1 CODEWORDS)))
(DE INTENTRY (X Y)
    (OR [GET X (OR Y 'SYM)] [ERROR "invalid symbol lookup"]))
(DE REG (X)
    (COND [(NULL X) 0]
	  [(REGP X) (*PLUS X %REG-O0)]
	  [(EQ X 'Q) %REG-Q]
	  [(EQ X 'P) %REG-P]
	  [(EQ X 'N) %REG-N]
	  [(EQ X 'W2) %REG-W2]
	  [T (ERROR "invalid reg")]))
(DE REGP (X) (MEMQ X '(1 2 3 4 5)))
(DE DPAST (OFF REG) (*PLUS (%RH OFF) (LSH REG 18)))
(DE CCONST (CON)
    (OR [NULL CON]
	[ASSOC CON CONSTLIST]
	[SETQ CONSTLIST
	      (CONS (CONS CON (-I (SETQ CONSTANTS (ADD1 CONSTANTS))))
		    CONSTLIST)]))
(DE DCONST (CON) (OR [CDR (ASSOC CON CONSTLIST)] 0))
(DE DLABEL (LAB) (EVAL LAB))
(DE CODEREL (CODAD)
    (SETQ CODAD (%RH CODAD))
    (MAPC (FUNCTION (LAMBDA (X) (SET X (*PLUS CODAD (EVAL X)))))
	  LABELIST)
    (MAPC (FUNCTION
	   (LAMBDA (X) (PUT X (*PLUS CODAD (GET X 'RELAD)) 'RELAD)))
	  LCLFNS))
(DE CONDEP NIL
    ((LAMBDA (CONST0)
      (MAPC (FUNCTION
	     (LAMBDA (X)
	      (%DEPOSIT-OBJECT-POINTER
	       (*PLUS CONSTANTS (CDR X))
	       (CAR X))
	      (RPLACD X (*PLUS CONST0 (CDR X)))))
	    CONSTLIST)
      (MAPC (FUNCTION
	     (LAMBDA (X)
	      (%DEPOSIT-VALUE-REFERENCE
	       (*PLUS CONSTANTS (CDR X))
	       (CAR X))
	      (RPLACD X (*PLUS CONST0 (CDR X)))))
	    VCONSTLIST)
      (MAPC (FUNCTION
	     (LAMBDA (X)
	      (%DEPOSIT-FUNCTION-LINKAGE
	       (*PLUS CONSTANTS (CDR X))
	       (CAR X))
	      (RPLACD X (*PLUS CONST0 (CDR X)))))
	    JCONSTLIST))
     (%RH CONSTANTS)))
(DE CJCONST (CONL)
    ((LAMBDA (CON TYP)
      (OR [AND [NULL CON] [ERROR "null address object"]]
	  [EQ TYP 'INTERNAL]
	  [GET CON 'RELAD]
	  [ASSOC CON JCONSTLIST]
	  [SETQ JCONSTLIST
		(CONS (CONS CON (-I (SETQ CONSTANTS (ADD1 CONSTANTS))))
		      JCONSTLIST)]))
     (CAR CONL)
     (CADR CONL)))
(DE DJCONST (CONL)
    ((LAMBDA (CON TYP)
      (OR [GET CON 'RELAD]
	  [AND [EQ TYP 'INTERNAL] [GET CON 'SYM]]
	  [*PLUS 4194304 (CDR (ASSOC CON JCONSTLIST))]))
     (CAR CONL)
     (CADR CONL)))
(DE CVCONST (CON)
    (OR [NULL CON]
	[ASSOC CON VCONSTLIST]
	[SETQ VCONSTLIST
	      (CONS (CONS CON (-I (SETQ CONSTANTS (ADD1 CONSTANTS))))
		    VCONSTLIST)]))
(DE DVCONST (CON)
    (COND [CON (*PLUS 4194304 (CDR (ASSOC CON VCONSTLIST)))] [T 0]))
(DE CWHAT (REF)
    (COND [(NUMBERP REF)]
	  [(EQ REF '%LARG)]
	  [(ATOM REF) (ERROR "unknown ref type")]
	  [(EQ 'QUOTE (CAR REF)) (CCONST (CADR REF))]
	  [(EQ 'FLUID (CAR REF)) (CVCONST (CADR REF))]
	  [(MEMQ (CAR REF) '(CAR CDR)) T]
	  [T (ERROR "unknown ref type")]))
(DE DWHAT (REF)
    (COND [(NUMBERP REF)
	   (COND [(GT REF 0) (REG REF)]
		 [T (*DIF (*PLUS (%RH REF) %PAST-REG-Q) STKOFFSET)])]
	  [(EQ REF '%LARG) %LARG]
	  [(ATOM REF) (ERROR "unknown ref type")]
	  [(EQ 'QUOTE (CAR REF)) (DCONST (CADR REF))]
	  [(EQ 'FLUID (CAR REF)) (DVCONST (CADR REF))]
	  [(EQ 'CAR (CAR REF)) (DPAST 0 (REG (CADR REF)))]
	  [(EQ 'CDR (CAR REF)) (DPAST 1 (REG (CADR REF)))]
	  [T (ERROR "unknown ref type")]))
 